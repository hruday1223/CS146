public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i=0; i<numCourses; i++) {
            adjList.add(new ArrayList<>());
        }
        
        for (int[] prerequisite : prerequisites) {
            int course= prerequisite[0];
            int prerequisiteCourse = prerequisite[1];
            adjList.get(course).add(prerequisiteCourse);
        }
        
        boolean[] visited = new boolean[numCourses];
        boolean[] recursionStack =new boolean[numCourses];
        
        for (int i = 0; i < numCourses; i++ ) {
            if (!visited[i]) {
                if (dfs(i,adjList,visited,recursionStack)) {
                    return false; 
                }
            }
        }
        return true; 
    }
    private boolean dfs(int course, List<List<Integer>> adjList, boolean[] visited, boolean[] recursionStack) {
        if (recursionStack[course]) {
            return true ; 
        }
        if (visited[course]) {
            return false; 
        }
        
        visited[course] =true;
        recursionStack[course] =true;
        
        
        for (int adjacentCourse : adjList.get(course)) {
            if (dfs(adjacentCourse,adjList,visited,recursionStack)) {
                return true; 
            }
        }
        recursionStack[course] = false; 
        return false;
    }

